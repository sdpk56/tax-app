name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_TAG: ${{ github.run_id }}
  # Define SonarQube properties as environment variables
  #SONAR_PROJECT_KEY_BACKEND: backend_project_key
  #SONAR_PROJECT_KEY_FRONTEND: frontend_project_key
  
jobs:
  # lint:
  #   name: ðŸ§¹ Python Linting with Ruff
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
      
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.10'

  #     - name: Install dependencies and ruff
  #       run: |
  #         pip install ruff

  #     - name: Run Ruff on Backend
  #       run: ruff check ./backend

  #     - name: Run Ruff on Frontend
  #       run: ruff check ./frontend
          
  sonarqube:
    name: ðŸ”Ž SonarQube Analysis
    runs-on: self-hosted
    #needs: lint # Depends on linting passing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for SonarQube to analyze branches and PRs

      - name: SonarQube Scan - Backend
        uses: sonarsource/sonarqube-scan-action@v2.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: backend/
          #projectKey: ${{ env.SONAR_PROJECT_KEY_BACKEND }}

      - name: SonarQube Scan - Frontend
        uses: sonarsource/sonarqube-scan-action@v2.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: frontend/
          #projectKey: ${{ env.SONAR_PROJECT_KEY_FRONTEND }}
      
  build-and-scan:
    name: ðŸ“¦ Build & Scan Docker Images
    runs-on: self-hosted
    needs: sonarqube # Depends on SonarQube analysis passing
    outputs:
      backend_full_image_name: ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }}
      frontend_full_image_name: ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker BuildX
      uses: docker/setup-buildx-action@v3

    # Build Backend Image
    - name: Build Backend Docker Image
      id: build_backend
      run: |
        echo "Building backend Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }}"
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }} ./backend
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }} ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:latest

    # Build Frontend Image
    - name: Build Frontend Docker Image
      id: build_frontend
      run: |
        echo "Building frontend Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }}"
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }} ./frontend
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }} ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:latest


    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Backend Docker Image
      run: |
        echo "Pushing backend Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }}"
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:latest

    - name: Push Frontend Docker Image
      run: |
        echo "Pushing frontend Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }}"
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:latest

  package-helm:
    name: ðŸ“¦ Package Helm Chart
    runs-on: self-hosted
    needs: build-and-scan
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: '3.10.0'
    - name: Package Helm Chart
      run: |
        echo "Packaging Helm chart: tax-app"
        helm package ./helm/tax-app
    - name: Upload Helm Chart Artifact
      uses: actions/upload-artifact@v4
      with:
        name: tax-app-helm-chart
        path: tax-app-*.tgz
        retention-days: 5

  notify-on-failure:
    name: ðŸ”” Notify on Failure
    runs-on: self-hosted
    needs: [build-and-scan, package-helm]
    if: failure()
    steps:
      - name: Send mail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'Workflow Failed: ${{ github.workflow }}'
          body: |
            Workflow "${{ github.workflow }}" failed on the main branch.
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: sdpk.ks3@gmail.com
          from: GitHub Actions


