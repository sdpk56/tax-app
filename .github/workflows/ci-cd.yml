name: CI: Code Quality, Build, Scan, Push, & Package (Docker Hub Naming)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io # Explicitly set for Docker Hub
  IMAGE_TAG: ${{ github.run_id }} # Use the unique GitHub run ID as the image tag

jobs:
  lint:
    name: üìè Code Quality (Super-Linter)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Run Super-Linter
      uses: github/super-linter@v5
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_PYTHON_FLAKE8: true
        VALIDATE_YAML: true
        # Add other linters relevant to your frontend, e.g.:
        # VALIDATE_JAVASCRIPT_STANDARD: true
        # VALIDATE_TYPESCRIPT_STANDARD: true
      continue-on-error: false

  build-and-scan:
    name: üì¶ Build & Scan Docker Images
    runs-on: ubuntu-latest
    needs: lint # This job depends on the 'lint' job completing successfully
    outputs:
      # Output the full image names for the next job to use
      backend_full_image_name: ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }}
      frontend_full_image_name: ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker BuildX
      uses: docker/setup-buildx-action@v3

    # Build Backend Image
    - name: Build Backend Docker Image
      id: build_backend # Add an ID to reference this step later
      run: |
        # Build the image with the full Docker Hub path and the run ID tag
        echo "Building backend Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }}"
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }} ./backend
        # Also tag as 'latest' for convenience, using the full Docker Hub path
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }} ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:latest

    - name: Scan Backend Docker Image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        # Scan the image using its full Docker Hub name and run ID tag
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }}
        format: 'table'
        exit-code: '1'
        severity: 'HIGH,CRITICAL'

    # Build Frontend Image
    - name: Build Frontend Docker Image
      id: build_frontend # Add an ID to reference this step later
      run: |
        # Build the image with the full Docker Hub path and the run ID tag
        echo "Building frontend Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }}"
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }} ./frontend
        # Also tag as 'latest' for convenience, using the full Docker Hub path
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }} ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:latest

    - name: Scan Frontend Docker Image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        # Scan the image using its full Docker Hub name and run ID tag
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }}
        format: 'table'
        exit-code: '1'
        severity: 'HIGH,CRITICAL'

  push-images:
    name: üöÄ Push Docker Images
    runs-on: ubuntu-latest
    needs: build-and-scan # This job depends on 'build-and-scan' completing successfully
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Needed if you're not passing images as artifacts

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }} # Use the Docker Hub username secret
        password: ${{ secrets.DOCKERHUB_TOKEN }} # Use the Docker Hub token/password secret

    - name: Push Backend Docker Image
      run: |
        # Push the image with the full Docker Hub path and run ID tag
        echo "Pushing backend Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }}"
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:${{ env.IMAGE_TAG }}
        # Push the 'latest' tag as well
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/tax-backend:latest

    - name: Push Frontend Docker Image
      run: |
        # Push the image with the full Docker Hub path and run ID tag
        echo "Pushing frontend Docker image: ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }}"
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:${{ env.IMAGE_TAG }}
        # Push the 'latest' tag as well
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/tax-frontend:latest

  package-helm:
    name: üì¶ Package Helm Chart
    runs-on: ubuntu-latest
    needs: build-and-scan # This job depends on 'build-and-scan' completing successfully
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Helm
      uses: azure/setup-helm@v1
      with:
        version: '3.10.0'
    - name: Package Helm Chart
      run: |
        echo "Packaging Helm chart: tax-app"
        helm package ./helm/tax-app
    - name: Upload Helm Chart Artifact
      uses: actions/upload-artifact@v4
      with:
        name: tax-app-helm-chart
        path: tax-app-*.tgz
        retention-days: 5